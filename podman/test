#!/bin/bash

TEST_CMD="/usr/bin/cp-test -t -u -r"
DIR="$(git rev-parse --show-toplevel)/podman/"
OPERATING_SYSTEM="cs8" # Changing this variable, change default OS

usage() {
  cat << USAGE

USAGE: test [OPTIONS]

OPTIONS:
  -c CMD    sets the command to be run by the container
              default: $TEST_CMD
  -o OS     Specify operating system where candlepin will be running
              For postgres are supported:
                cs8 - Centos Stream 8 (default)
              For mysql are supported:
                cs8 - Centos Stream 8 (default)
              Without database are supported:
                cs8 - Centos Stream 8 (default)
              For sonarqube are supported:
                cs8 - Centos Stream 8 (default)
  -m        use mysql
  -n NAME   Sets the project name for the podman-compose run
  -p        use postgres
  -l        skip podman pull and use local images
  -d        run containers detached and do not
              automatically shut down & remove the
              containers on the script's exit
  -e        expose ports 8443, 8080 and 22 to the host machine

USAGE
}

while getopts ":c:mn:o:plde" opt; do
  case $opt in
    c) TEST_CMD="$OPTARG";;
    m)
       COMPOSE_ARGS="-f $DIR/podman-compose-mysql";
       chcon -Rt svirt_sandbox_file_t $DIR/mysql.cnf;
       sudo chown 999:999 $DIR/mysql.cnf;;
    n) PROJ_NAME="-p $OPTARG";;
    o) OPERATING_SYSTEM=$OPTARG;;
    p) COMPOSE_ARGS="-f $DIR/podman-compose-postgres";;
    l) USE_CACHE="1";;
    d) DETACHED="1";;
    e) EXPOSE_PORTS="1";;
    \?)
      echo "Invalid option: -$OPTARG" >&2
      usage
      exit 1
      ;;
    :)
      echo "Option -$OPTARG requires an argument." >&2
      usage
      exit 1
      ;;
  esac
done

COMPOSE_ARGS="$COMPOSE_ARGS-$OPERATING_SYSTEM.yml"
echo COMPOSE_ARGS = $COMPOSE_ARGS

if ! [ $COMPOSE_ARGS ];
then
  echo "Operating system: $OPERATING_SYSTEM not supported!"
  usage
  exit 1
fi

# PROJ_NAME should be set in a jenkins environment. It allows multiple
#  instances of the compose to run without clobbering each other.
cd $DIR
podman-compose $PROJ_NAME stop
podman-compose $PROJ_NAME rm -f

if [ "$USE_CACHE" != "1" ]; then
  podman-compose $COMPOSE_ARGS pull
fi

SERVICE_PORTS_ARG=""
if [ "$EXPOSE_PORTS" == "1" ]; then
  SERVICE_PORTS_ARG="--service-ports"
fi

if [ "$DETACHED" == "1" ]; then
    # Run detached, and don't remove the containers
    podman-compose $PROJ_NAME $COMPOSE_ARGS run -d $SERVICE_PORTS_ARG candlepin $TEST_CMD
    RETVAL=$?
else
    podman-compose $PROJ_NAME $COMPOSE_ARGS run --rm $SERVICE_PORTS_ARG candlepin $TEST_CMD
    RETVAL=$?
    podman-compose $PROJ_NAME down
fi

echo "return value: $RETVAL"
cd -
exit $RETVAL
