#!/bin/bash

unset CDPATH
SCRIPT_NAME=$(basename "$0")
SCRIPT_HOME=$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)
CURRENT_DIR=$PWD

# defaults
source $SCRIPT_HOME/.env
BUILD_ARGS="--no-cache"
PUSH='false'

evalrc() {
  if [ "$1" -ne "0" ]; then
    echo "$2"
    cd $CURRENT_DIR
    exit $1
  fi
}

usage() {
  cat <<HELP
Usage: $SCRIPT_NAME [options] [IMAGE]
  * if IMAGE is omitted, all images will be built

OPTIONS:
  -h          Prints this message.
  -p          Push images to a repository or registry
  -d <repo>   Specify the destination repo to receive the images; implies -p;
              defaults to: "$REGISTRY"
  -c          Use cached layers when building containers; defaults to false
  -v          Enable verbose/debug output
HELP
}

while getopts ":pd:ce:v" opt; do
  case $opt in
  h)
    usage
    exit 0
    ;;
  p) PUSH='true' ;;
  d)
    PUSH='true'
    REGISTRY="${OPTARG}"
    ;;
  c) BUILD_ARGS="$(echo $BUILD_ARGS | sed -e s/--no-cache//g)" ;;
  v) set -x ;;
  \?)
    echo "Invalid option: -$OPTARG" >&2
    usage
    exit 1
    ;;
  :)
    echo "Option -$OPTARG requires an argument." >&2
    usage
    exit 1
    ;;
  esac
done

shift $(($OPTIND - 1))

# Determine image name
if [ "$1" != "" ]; then
  IMAGE=$1
fi

DEFAULT_IMAGES='candlepin-base candlepin-base-cs8'
IMAGES=${IMAGE:-$DEFAULT_IMAGES}

echo "Building images..."
cd $SCRIPT_HOME
CP_VERSION="$(git describe | cut -d- -f 2)"
for IMG in ${IMAGES}; do
  "podman" build -f $IMG/Dockerfile . -t $REGISTRY/$IMG:latest
  evalrc $? "Build not successful."
  "podman" tag $REGISTRY/$IMG:latest $REGISTRY/$IMG:$CP_VERSION
done

if [ $PUSH = true ]; then
  echo "Pushing images..."
  # pushes the version tag
  for IMG in ${IMAGES}; do
    "podman" push $REGISTRY/$IMG
    evalrc $? "Push not successful."
  done
fi
