import org.gradle.api.tasks.testing.logging.TestExceptionFormat
import org.gradle.api.tasks.testing.logging.TestLogEvent

plugins {
    id 'org.springframework.boot' version '2.5.0'
    id 'io.spring.dependency-management' version '1.0.11.RELEASE'
    id 'java'
}

repositories {
    mavenCentral()
}

description = "Candlepin Spec Tests"

dependencies {
    implementation project(":client")

    implementation 'org.springframework.boot:spring-boot-starter'
    implementation "com.squareup.okhttp3:okhttp"

    testImplementation 'org.springframework.boot:spring-boot-starter-test'
}

bootJar {
    enabled = false
}

test {
// TODO find a better way to exclute spec tests from notmal "./gradlew test" run
//    onlyIf {
//        project.hasProperty("runSpec")
//    }

    useJUnitPlatform()

    testLogging {
        // set options for log level LIFECYCLE
        events TestLogEvent.FAILED,
                TestLogEvent.PASSED,
                TestLogEvent.SKIPPED
        // TestLogEvent.STANDARD_OUT
        exceptionFormat TestExceptionFormat.FULL
        showExceptions true
        showCauses true
        showStackTraces true

        // set options for log level DEBUG and INFO
        debug {
            events TestLogEvent.STARTED,
                    TestLogEvent.FAILED,
                    TestLogEvent.PASSED,
                    TestLogEvent.SKIPPED,
                    TestLogEvent.STANDARD_ERROR,
                    TestLogEvent.STANDARD_OUT
            exceptionFormat TestExceptionFormat.FULL
        }
        info.events = debug.events
        info.exceptionFormat = debug.exceptionFormat

        afterSuite { desc, result ->
            if (!desc.parent) { // will match the outermost suite
                def output = "Results: ${result.resultType} (${result.testCount} tests, ${result.successfulTestCount} successes, ${result.failedTestCount} failures, ${result.skippedTestCount} skipped)"
                def startItem = "|  ", endItem = "  |"
                def repeatLength = startItem.length() + output.length() + endItem.length()
                println("\n" + ("-" * repeatLength) + "\n" + startItem + output + endItem + "\n" + ("-" * repeatLength))
            }
        }
    }
}

task spec(type: Test) {
    doFirst{ project.ext.runSpec = "true" }
    finalizedBy 'test'
}
